name: Backend Deployment To AWS

on:
  push:
    branches:
      - main
permissions:
  contents: read

jobs:
  CI-CD:
    environment: LOOPZ-BE-production
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'zulu'

    # cache gradle
    - name: Gradle Caching
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle

    # gradle chmod
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    # gradle build
    - name: Build with Gradle
      run: ./gradlew :loopz-backend:clean :loopz-backend:build -x test

    # docker login
    - name: Docker Hub Login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Set SHORT_SHA env
      run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

    - name: Docker build & push to prod
      run: |
        IMAGE_NAME=gothax2/loopz_backend
        TAG_SHA=${SHORT_SHA}
        docker build -f Dockerfile -t ${IMAGE_NAME}:latest -t ${IMAGE_NAME}:${TAG_SHA} .
        docker push ${IMAGE_NAME}:${TAG_SHA}
        docker push ${IMAGE_NAME}:latest

      ## deploy to production
    - name: Deploy to prod
      uses: appleboy/ssh-action@master
      id: deploy-prod
      with:
        host: ${{ secrets.HOST_PROD }}
        username: ubuntu
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        envs: SHORT_SHA
        script: |
          IMAGE_TAG=${SHORT_SHA}
          echo "Deploying image tag: $IMAGE_TAG"
          sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p '${{ secrets.DOCKER_PASSWORD }}'
          sudo docker rm -f $(sudo docker ps -qa) || true
          sudo docker pull gothax2/loopz_backend:${IMAGE_TAG}
          
          OLD_IMAGES=$(sudo docker images "gothax2/loopz_backend" --format "{{.Repository}}:{{.Tag}}" | grep -v "${IMAGE_TAG}")
          if [ -n "$OLD_IMAGES" ]; then
            echo "Removing old images:"
            echo "$OLD_IMAGES"
            echo "$OLD_IMAGES" | xargs -r sudo docker rmi -f
          fi
          
          sudo IMAGE_TAG=${IMAGE_TAG} docker-compose up -d
          sudo docker image prune -f
